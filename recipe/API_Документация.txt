Документация API "Рецепты"

Введение

Этот документ описывает API для приложения "Рецепты", позволяющего пользователям регистрироваться, входить в систему, просматривать рецепты, создавать рецепты и управлять профилями.

Аутентификация

Все защищенные конечные точки API требуют аутентификации с использованием JWT (JSON Web Tokens). Токен JWT должен быть включен в заголовок Authorization каждого запроса в формате Bearer <token>.

Конечные точки API

1. Аутентификация

Регистрация пользователя (POST /api/auth/register)
Описание: Регистрирует нового пользователя.
Метод: POST
URL: /api/auth/register
Заголовки: Content-Type: application/json
Тело запроса (JSON):
JSON

{
    "email": "пользователь@пример.com",
    "password": "пароль123",
    "name": "Имя Пользователя",
    "provider": "local"
}
Ответ:
Код состояния: 200 OK
Тело ответа: {"message": "Пользователь успешно зарегистрирован!"}
Вход пользователя (POST /api/auth/login)
Описание: Аутентифицирует пользователя и возвращает JWT.
Метод: POST
URL: /api/auth/login
Заголовки: Content-Type: application/json
Тело запроса (JSON):
JSON

{
    "email": "пользователь@пример.com",
    "password": "пароль123"
}
Ответ:
Код состояния: 200 OK
Тело ответа: JWT токен (строка).
2. Профиль пользователя

Получение профиля текущего пользователя (GET /api/users/profile)
Описание: Возвращает профиль текущего авторизованного пользователя.
Метод: GET
URL: /api/users/profile?userId=1 (замените 1 на ID пользователя)
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Данные профиля пользователя (JSON).
Обновление профиля пользователя (PUT /api/users/profile)
Описание: Обновляет профиль текущего авторизованного пользователя.
Метод: PUT
URL: /api/users/profile?userId=1 (замените 1 на ID пользователя)
Заголовки: Authorization: Bearer <token>, Content-Type: application/json
Тело запроса (JSON):
JSON

{
    "name": "Новое Имя",
    "age": 30,
    "profilePictureUrl": "http://пример.com/изображение.jpg",
    "favoriteFoods": ["Пицца", "Паста"]
}
Ответ:
Код состояния: 200 OK
Тело ответа: Обновленные данные профиля пользователя (JSON).
Получение профиля пользователя по ID (GET /api/users/{userId})
Описание: Возвращает профиль пользователя по его ID.
Метод: GET
URL: /api/users/1 (замените 1 на ID пользователя)
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Данные профиля пользователя (JSON).
3. Рецепты

Получение всех рецептов (GET /api/recipes)
Описание: Возвращает список всех рецептов.
Метод: GET
URL: /api/recipes
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Список рецептов (JSON).
Получение рецепта по ID (GET /api/recipes/{recipeId})
Описание: Возвращает рецепт по его ID.
Метод: GET
URL: /api/recipes/1 (замените 1 на ID рецепта)
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Данные рецепта (JSON).
Создание рецепта (POST /api/recipes)
Описание: Создает новый рецепт.
Метод: POST
URL: /api/recipes
Заголовки: Authorization: Bearer <token>, Content-Type: application/json
Тело запроса (JSON):
JSON

{
    "name": "Новый Рецепт",
    "description": "Описание рецепта",
    "imageUrl": "http://пример.com/рецепт.jpg",
    "category": "Десерт",
    "creator": {"id": 1}
}
Ответ:
Код состояния: 200 OK
Тело ответа: Данные созданного рецепта (JSON).
Обновление рецепта (PUT /api/recipes/{recipeId})
Описание: Обновляет рецепт по его ID.
Метод: PUT
URL: /api/recipes/1 (замените 1 на ID рецепта)
Заголовки: Authorization: Bearer <token>, Content-Type: application/json
Тело запроса (JSON):
JSON

{
    "name": "Обновленный Рецепт",
    "description": "Обновленное описание рецепта",
    "imageUrl": "http://пример.com/обновленный-рецепт.jpg",
    "category": "Обновленная Категория",
    "creator": {"id": 1}
}
Ответ:
Код состояния: 200 OK
Тело ответа: Обновленные данные рецепта (JSON).
Удаление рецепта (DELETE /api/recipes/{recipeId})
Описание: Удаляет рецепт по его ID.
Метод: DELETE
URL: /api/recipes/1 (замените 1 на ID рецепта)
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Поиск рецептов (GET /api/recipes/search?query={searchQuery})
Описание: Поиск рецептов по запросу.
Метод: GET
URL: /api/recipes/search?query=пицца
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Список найденных рецептов (JSON).
Добавление рецепта в избранное (POST /api/recipes/{recipeId}/favorite)
Описание: Добавляет рецепт в список избранных пользователя.
Метод: POST
URL: /api/recipes/1/favorite?userId=1
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Обновленные данные пользователя (JSON).
Удаление рецепта из избранного (DELETE /api/recipes/{recipeId}/favorite)
Описание: Удаляет рецепт из списка избранных пользователя.
Метод: DELETE
URL: /api/recipes/1/favorite?userId=1
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Обновленные данные пользователя (JSON).
4. Категории рецептов

Получение всех категорий (GET /api/categories)
Описание: Возвращает список всех категорий рецептов.
Метод: GET
URL: /api/categories
Заголовки: Authorization: Bearer <token>
Ответ:
Код состояния: 200 OK
Тело ответа: Список категорий (JSON).